@using AG.Models
@model Genetic_algorithm.Models.CombinedAlgorithmParameters

@{
    ViewData["Title"] = "Uruchom algorytm";
}

<!-- Kontener z tytułem i przyciskiem w tym samym wierszu -->
<div class="d-flex justify-content-between align-items-center">
    <h2>Uruchom algorytm</h2>

    <!-- Przycisk do otwarcia okienka popup (w prawym górnym rogu) -->
    <button class="btn btn-secondary" id="openModalButton">Ustawienia zaawansowane</button>
</div>

<!-- Formularz na głównej stronie -->
<form asp-action="Run" method="post">
    <fieldset>
        <legend>Parametry harmonogramu</legend>

        @for (int i = 0; i < Model.ScheduleParametersList.Count; i++)
        {
            <div>
                <label for="ScheduleParametersList[@i].NumberOfWorkers">Liczba pracowników:</label>
                <input type="number" name="ScheduleParametersList[@i].NumberOfWorkers" class="form-control" value="@Model.ScheduleParametersList[i].NumberOfWorkers" />
            </div>
            <!-- Dodanie pól dla liczby pracowników na zmiany -->
            <div>
                <label>Liczba pracowników na zmianę:</label>
                <div class="row">
                    <!-- Zmiana poranna -->
                    <div class="col">
                        <label for="ScheduleParametersList[@i].MorningShiftWorkers">Rano:</label>
                        <input type="number" name="ScheduleParametersList[@i].MorningShiftWorkers" class="form-control" value="@Model.ScheduleParametersList[i].MorningShiftWorkers" min="1" />
                    </div>

                    <!-- Zmiana popołudniowa -->
                    <div class="col">
                        <label for="ScheduleParametersList[@i].AfternoonShiftWorkers">Popołudnie:</label>
                        <input type="number" name="ScheduleParametersList[@i].AfternoonShiftWorkers" class="form-control" value="@Model.ScheduleParametersList[i].AfternoonShiftWorkers" min="1" />
                    </div>

                    <!-- Zmiana nocna -->
                    <div class="col">
                        <label for="ScheduleParametersList[@i].NightShiftWorkers">Noc:</label>
                        <input type="number" name="ScheduleParametersList[@i].NightShiftWorkers" class="form-control" value="@Model.ScheduleParametersList[i].NightShiftWorkers" min="1" />
                    </div>
                </div>
            </div>
            <!-- Przycisk do otwarcia okienka preferencji pracowników -->
            <div>
                <button type="button" class="btn btn-secondary mt-2" id="openPreferencesModalButton" disabled>
                    Wprowadź preferencje pracowników
                </button>
            </div>
            <div>
                <label for="ScheduleParametersList[@i].DaysInWeek">Liczba dni:</label>
                <input type="number" name="ScheduleParametersList[@i].DaysInWeek" class="form-control" value="7" readonly />
            </div>
            
        }
    </fieldset>

    <button type="submit" class="btn btn-primary">Uruchom</button>
</form>

<!-- Okienko popup (Modal) z formularzem do ustawień algorytmu -->
<div class="modal fade" id="algorithmSettingsModal" tabindex="-1" aria-labelledby="algorithmSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="algorithmSettingsModalLabel">Parametry algorytmu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Formularz w modalnym okienku -->
                <form asp-action="SaveAlgorithmSettings" method="post">
                    <fieldset>
                        <legend>Parametry optymalizacji</legend>

                        @for (int i = 0; i < Model.OptimizationParametersList.Count; i++)
                        {
                            <div>
                                <label for="OptimizationParametersList[@i].OptimizationType">Typ optymalizacji:</label>
                                <select name="OptimizationParametersList[@i].OptimizationType" class="form-control">
                                    <!option value="1" @(Model.OptimizationParametersList[i].OptimizationType == OptimizationType.Roulette ? "selected" : "")>Ruletka</!option>
                                    <!option value="2" @(Model.OptimizationParametersList[i].OptimizationType == OptimizationType.Tournament ? "selected" : "")>Turniej</!option>
                                </select>
                            </div>
                            <div>
                                <label for="OptimizationParametersList[@i].PopulationSize">Rozmiar populacji:</label>
                                <input type="number" name="OptimizationParametersList[@i].PopulationSize" class="form-control" value="@Model.OptimizationParametersList[i].PopulationSize" min="10" max="1000" />
                            </div>
                            <div>
                                <label for="OptimizationParametersList[@i].MutationFrequency">Częstotliwość mutacji:</label>
                                <input type="input" name="OptimizationParametersList[@i].MutationFrequency" class="form-control" value="@Model.OptimizationParametersList[i].MutationFrequency" min="0" max="1" step="0.01" />
                            </div>

                            <div>
                                <label for="OptimizationParametersList[@i].NumberOfParents">Liczba rodziców:</label>
                                <input type="number" name="OptimizationParametersList[@i].NumberOfParents" class="form-control" value="@Model.OptimizationParametersList[i].NumberOfParents" min="2" max="100" />
                            </div>

                            <div>
                                <label for="OptimizationParametersList[@i].ElitePercentage">Procent elitarnych osobników:</label>
                                <input type="input" name="OptimizationParametersList[@i].ElitePercentage" class="form-control" value="@Model.OptimizationParametersList[i].ElitePercentage" min="0" max="1" step="0.01" />
                            </div>

                            <!-- Dodanie brakujących pól -->
                            <div>
                                <label for="OptimizationParametersList[@i].MaxGenerations">Maksymalna liczba generacji:</label>
                                <input type="number" name="OptimizationParametersList[@i].MaxGenerations" class="form-control" value="@Model.OptimizationParametersList[i].MaxGenerations" min="1" />
                            </div>

                            <div>
                                <label for="OptimizationParametersList[@i].MaxStagnation">Maksymalna liczba generacji bez poprawy:</label>
                                <input type="number" name="OptimizationParametersList[@i].MaxStagnation" class="form-control" value="@Model.OptimizationParametersList[i].MaxStagnation" min="0" />
                            </div>

                            <div>
                                <label for="OptimizationParametersList[@i].CrossoverPoints">Liczba punktów krzyżowania:</label>
                                <input type="number" name="OptimizationParametersList[@i].CrossoverPoints" class="form-control" value="@Model.OptimizationParametersList[i].CrossoverPoints" min="1" />
                            </div>
                        }
                    </fieldset>

                    <button type="submit" class="btn btn-primary">Zapisz</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Okienko Modalne - Algorytm w trakcie działania -->
<div class="modal" tabindex="-1" id="loadingModal" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Wykonywanie algorytmu</h5>
      </div>
      <div class="modal-body">
        <p>Algorytm jest w trakcie wykonywania. Proszę czekać...</p>
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Ładowanie...</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal dla preferencji pracowników z szerszym oknem -->
<div class="modal fade" id="preferencesModal" tabindex="-1" aria-labelledby="preferencesModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="max-width: 1200px;"> <!-- Ustawienie niestandardowej szerokości -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="preferencesModalLabel">Preferencje pracowników</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="PreferencesForm">
                    <div id="preferencesContainer"></div>
                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary">Zapisz preferencje</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Bootstrap 5 JS i Popper.js do działania okienka popup -->
<script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

<script>
    // Modal zaawansowanych ustawień
    var modal = new bootstrap.Modal(document.getElementById('algorithmSettingsModal'));
    document.getElementById('openModalButton').addEventListener('click', function () {
        modal.show();
    });

    // Obsługa przycisku preferencji pracowników
       const openPreferencesModalButton = document.getElementById('openPreferencesModalButton');
       const preferencesModal = new bootstrap.Modal(document.getElementById('preferencesModal'));
       const preferencesContainer = document.getElementById('preferencesContainer');
       const numberOfWorkersInput = document.querySelector('input[name="ScheduleParametersList[0].NumberOfWorkers"]'); 
   
       // Aktywacja przycisku dodania preferencji
       numberOfWorkersInput.addEventListener('input', () => {
           const numberOfWorkers = parseInt(numberOfWorkersInput.value);
           openPreferencesModalButton.disabled = isNaN(numberOfWorkers) || numberOfWorkers <= 0;
       });
   
        // Otwieranie modala i generowanie pól preferencji
           openPreferencesModalButton.addEventListener('click', () => {
               const numberOfWorkers = parseInt(numberOfWorkersInput.value);
               preferencesContainer.innerHTML = ''; // Wyczyść pola przy otwieraniu
       
               for (let i = 1; i <= numberOfWorkers; i++) {
                   const workerPreferences = `
                       <fieldset class="mb-3">
                           <legend>Pracownik ${i}</legend>
                         <!-- Preferencje dni i zmiany w jednym wierszu -->
                         <div class="mb-3">
                             <label for="Worker${i}PreferredDaysAndShifts" class="form-label">Preferencje dni i zmiany:</label>
                             <div id="Worker${i}PreferredDaysAndShifts" class="row">
                                 <!-- Poniedziałek -->
                                 <div class="col">
                                     <label for="Worker${i}MondayShift">Poniedziałek:</label>
                                     <select id="Worker${i}MondayShift" name="WorkerPreferences[${i - 1}].PreferredMonday" class="form-select">
                                         <option value="none">Brak preferencji</option>
                                         <option value="off">Wolne</option>
                                         <option value="1">Rano</option>
                                         <option value="2">Popołudnie</option>
                                         <option value="3">Noc</option>
                                     </select>
                                 </div>
                                 
                                 <!-- Wtorek -->
                                 <div class="col">
                                     <label for="Worker${i}TuesdayShift">Wtorek:</label>
                                     <select id="Worker${i}TuesdayShift" name="WorkerPreferences[${i - 1}].PreferredTuesday" class="form-select">
                                         <option value="none">Brak preferencji</option>
                                         <option value="off">Wolne</option>
                                         <option value="1">Rano</option>
                                         <option value="2">Popołudnie</option>
                                         <option value="3">Noc</option>
                                     </select>
                                 </div>
                         
                                 <!-- Środa -->
                                 <div class="col">
                                     <label for="Worker${i}WednesdayShift">Środa:</label>
                                     <select id="Worker${i}WednesdayShift" name="WorkerPreferences[${i - 1}].PreferredWednesday" class="form-select">
                                         <option value="none">Brak preferencji</option>
                                         <option value="off">Wolne</option>
                                         <option value="1">Rano</option>
                                         <option value="2">Popołudnie</option>
                                         <option value="3">Noc</option>
                                     </select>
                                 </div>
                         
                                 <!-- Czwartek -->
                                 <div class="col">
                                     <label for="Worker${i}ThursdayShift">Czwartek:</label>
                                     <select id="Worker${i}ThursdayShift" name="WorkerPreferences[${i - 1}].PreferredThursday" class="form-select">
                                         <option value="none">Brak preferencji</option>
                                         <option value="off">Wolne</option>
                                         <option value="1">Rano</option>
                                         <option value="2">Popołudnie</option>
                                         <option value="3">Noc</option>
                                     </select>
                                 </div>
                         
                                 <!-- Piątek -->
                                 <div class="col">
                                     <label for="Worker${i}FridayShift">Piątek:</label>
                                     <select id="Worker${i}FridayShift" name="WorkerPreferences[${i - 1}].PreferredFriday" class="form-select">
                                         <option value="none">Brak preferencji</option>
                                         <option value="off">Wolne</option>
                                         <option value="1">Rano</option>
                                         <option value="2">Popołudnie</option>
                                         <option value="3">Noc</option>
                                     </select>
                                 </div>
                         
                                 <!-- Sobota -->
                                 <div class="col">
                                     <label for="Worker${i}SaturdayShift">Sobota:</label>
                                     <select id="Worker${i}SaturdayShift" name="WorkerPreferences[${i - 1}].PreferredSaturday" class="form-select">
                                         <option value="none">Brak preferencji</option>
                                         <option value="off">Wolne</option>
                                         <option value="1">Rano</option>
                                         <option value="2">Popołudnie</option>
                                         <option value="3">Noc</option>
                                     </select>
                                 </div>
                         
                                 <!-- Niedziela -->
                                 <div class="col">
                                     <label for="Worker${i}SundayShift">Niedziela:</label>
                                     <select id="Worker${i}SundayShift" name="WorkerPreferences[${i - 1}].PreferredSunday" class="form-select">
                                         <option value="none">Brak preferencji</option>
                                         <option value="off">Wolne</option>
                                         <option value="1">Rano</option>
                                         <option value="2">Popołudnie</option>
                                         <option value="3">Noc</option>
                                     </select>
                                 </div>
                             </div>
                         </div>

                           <!-- Preferencje liczby dni pracy -->
                           <div class="mb-2">
                               <label for="Worker${i}MaxWorkDays" class="form-label">Maksymalna liczba dni pracy:</label>
                               <input type="number" id="Worker${i}MaxWorkDays" name="WorkerPreferences[${i - 1}].MaxWorkDays" class="form-control" min="1" max="7" placeholder="Brak preferencji" />
                           </div>
       
                           <!-- Preferencje liczby dni wolnych -->
                           <div class="mb-2">
                               <label for="Worker${i}MinDaysOff" class="form-label">Minimalna liczba dni wolnych:</label>
                               <input type="number" id="Worker${i}MinDaysOff" name="WorkerPreferences[${i - 1}].MinDaysOff" class="form-control" min="0" max="6" placeholder="Brak preferencji" />
                           </div>
       
                         <div class="mb-2">
                             <label for="Worker${i}PreferredColleagues" class="form-label">Preferowani współpracownicy:</label>
                             <select id="Worker${i}PreferredColleagues" name="WorkerPreferences[${i - 1}].PreferredColleagues" class="form-select" multiple>
                                 <!-- Opcje będą generowane dynamicznie -->
                                 ${generateWorkerOptions(numberOfWorkers, i)}
                             </select>
                             <!-- Kontener na listę wybranych pracowników -->
                             <div id="Worker${i}SelectedColleagues" class="mt-2">
                                 <text>Wybrani współpracownicy:</text>
                                 <ul id="Worker${i}SelectedColleaguesList"></ul>
                             </div>
                         </div>

                       </fieldset>
                   `;
                   preferencesContainer.insertAdjacentHTML('beforeend', workerPreferences);
               }
       
               preferencesModal.show();
           });
       
           
          // Funkcja do generowania opcji dla selecta preferowanych współpracowników
              function generateWorkerOptions(numberOfWorkers, currentWorkerIndex) {
                  let options = "";
                  for (let j = 1; j <= numberOfWorkers; j++) {
                      if (j !== currentWorkerIndex) {
                          options += `<option value="${j}">Pracownik ${j}</option>`;
                      }
                  }
                  return options;
              }
          
             // Obsługa zmiany preferowanych współpracowników
             document.addEventListener('change', (event) => {
                 if (event.target && event.target.matches('[id^="Worker"][id$="PreferredColleagues"]')) {
                     const selectedOptions = Array.from(event.target.selectedOptions).map(option => parseInt(option.value));
                     console.log(`Wybrani pracownicy dla ${event.target.id}:`, selectedOptions);
             
                     // Pobieramy numer pracownika z ID
                     const workerId = event.target.id.match(/\d+/)[0];
             
                     // Aktualizacja listy wybranych pracowników
                     const listId = `${event.target.id.replace("PreferredColleagues", "SelectedColleaguesList")}`;
                     const listElement = document.getElementById(listId);
             
                     if (!listElement) {
                         console.error(`Nie znaleziono listy o ID: ${listId}`);
                         return;
                     }
             
                     // Dodajemy nowe elementy do listy
                     selectedOptions.forEach(workerId => {
                         if (![...listElement.children].some(li => li.textContent.includes(`Pracownik ${workerId}`))) {
                             const li = document.createElement('li');
                             li.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
                             li.textContent = `Pracownik ${workerId}`;
             
                             // Tworzymy przycisk do usuwania
                             const removeBtn = document.createElement('button');
                             removeBtn.textContent = 'Usuń';
                             removeBtn.classList.add('remove-btn');
                             removeBtn.onclick = () => li.remove(); // Usuwamy element li
             
                             // Dodajemy przycisk do elementu li
                             li.appendChild(removeBtn);
                             
                             // Dodajemy pracownika do listy
                             listElement.appendChild(li);
                         }
                     });
                 }
             });


           
           
           
           
           document.getElementById('PreferencesForm').addEventListener('submit', async (e) => {
               e.preventDefault(); // Zatrzymanie domyślnego zachowania formularza
               preferencesModal.hide(); // Zamknięcie modala
           
               // Zbieranie danych preferencji
               const preferences = {};
               const numberOfWorkers = parseInt(numberOfWorkersInput.value);
           
               for (let i = 1; i <= numberOfWorkers; i++) {
                   // Pobieranie wybranych preferowanych współpracowników z listy <ul>
                   const selectedColleaguesList = document.querySelector(`#Worker${i}SelectedColleaguesList`);
                   const selectedColleagues = Array.from(selectedColleaguesList.getElementsByTagName('li')).map(li => {
                       // Zakładając, że tekst w li to "Pracownik X" i chcemy wyciągnąć numer
                       return parseInt(li.textContent.replace('Pracownik ', '').trim());
                   });
           
                   // Logowanie liczby wybranych preferowanych współpracowników
                   console.log(`Pracownik ${i} wybrał ${selectedColleagues.length} preferowanych współpracowników:`, selectedColleagues);
           
                   const workerPreferences = {
                       Shifts: {
                           Monday: document.querySelector(`#Worker${i}MondayShift`).value || 'none',
                           Tuesday: document.querySelector(`#Worker${i}TuesdayShift`).value || 'none',
                           Wednesday: document.querySelector(`#Worker${i}WednesdayShift`).value || 'none',
                           Thursday: document.querySelector(`#Worker${i}ThursdayShift`).value || 'none',
                           Friday: document.querySelector(`#Worker${i}FridayShift`).value || 'none',
                           Saturday: document.querySelector(`#Worker${i}SaturdayShift`).value || 'none',
                           Sunday: document.querySelector(`#Worker${i}SundayShift`).value || 'none'
                       },
                       MaxWorkDays: document.querySelector(`#Worker${i}MaxWorkDays`).value || -1,
                       MinDaysOff: document.querySelector(`#Worker${i}MinDaysOff`).value || -1,
                       PreferredColleagues: selectedColleagues // Wszystkie wybrane preferencje współpracowników
                   };
           
                   preferences[`Worker${i}`] = workerPreferences;
               }
           
               // Konwersja danych na format JSON
               const preferencesJson = JSON.stringify(preferences);
           
               // Wyświetlanie danych w konsoli (możesz je wysłać do serwera)
               console.log('Wysyłamy preferencje:', preferencesJson);
           
               try {
                   // Wysyłanie danych do serwera
                   const response = await fetch('/Algorithm/SaveEmployeePreferences', {
                       method: 'POST',
                       headers: {
                           'Content-Type': 'application/json' // Określamy, że wysyłamy dane w formacie JSON
                       },
                       body: preferencesJson // Wysyłamy dane w formacie JSON
                   });
           
                   if (response.ok) {
                       //alert('Preferencje zostały zapisane!');
                   } else {
                       alert('Wystąpił błąd podczas zapisywania preferencji.');
                   }
               } catch (error) {
                   console.error('Błąd podczas wysyłania danych:', error);
                   alert('Wystąpił błąd podczas łączenia z serwerem.');
               }
           
               preferencesModal.hide(); // Zamknięcie modala
           });




</script>